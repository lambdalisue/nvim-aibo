*aibo.txt*	AI Bot Integration and Orchestration for Neovim

Author:  lambdalisue <lambdalisue@gmail.com>
License: MIT license

=============================================================================
CONTENTS					*aibo-contents*

INTRODUCTION				|aibo-introduction|
REQUIREMENTS				|aibo-requirements|
USAGE					|aibo-usage|
CONFIGURATION				|aibo-configuration|
CUSTOMIZATION				|aibo-customization|
INTERFACE				|aibo-interface|
  COMMANDS				|aibo-commands|
  FUNCTIONS				|aibo-functions|
  KEY MAPPINGS				|aibo-key-mappings|
  PLUG MAPPINGS				|aibo-plug-mappings|
HEALTH CHECK				|aibo-health|
FAQ					|aibo-faq|
DEVELOPER DOCUMENTATION			|aibo-dev|

=============================================================================
INTRODUCTION					*aibo-introduction*

*aibo.vim* (*aibo*) is a Neovim plugin designed as your AI companion, providing
seamless integration with AI assistants through terminal interfaces. The name
"aibo" comes from the Japanese word for "companion," reflecting the plugin's
role as your AI companion in Neovim. While optimized for AI tools, it also
works with any interactive CLI application.

The plugin creates a split-window interface with:
- A terminal console where AI tools or other CLI programs run
- A dedicated prompt buffer for user input
- Smart key mappings for efficient interaction

Key features:
- Cross-platform support for Neovim
- Specialized support for AI assistants (Claude, Codex, Ollama)
- Tool-specific key mappings and completions
- Works with Gemini and other AI CLI tools
- Also works with any interactive CLI tool (REPLs, database clients, etc.)
- Clean separation between console and prompt
- Automatic buffer management

For developer documentation, architecture details, and contribution guidelines,
see |aibo-dev.txt|.

=============================================================================
REQUIREMENTS					*aibo-requirements*

- Neovim 0.10.0+ (required for full Lua implementation)
- An AI assistant CLI tool (claude, codex, ollama, etc.) or any other
  interactive CLI tool

=============================================================================
USAGE						*aibo-usage*

Start an interactive session with the |:Aibo| command:
>
	:Aibo claude
	:Aibo python -i
	:Aibo psql mydatabase
<
This opens a terminal console running the specified interactive tool and
creates a prompt buffer below it for your input.

Type your message in the prompt buffer and press |<CR>| in normal mode to
submit. You can also use |<F5>| or |<C-Enter>| to submit from insert mode.
The message will be sent to the CLI tool and the prompt buffer will be
cleared for your next input.

						*aibo-esc-mapping*
WARNING: Key mapping difference~
To prevent unintended interrupts from the Vimmer's habit of hitting <Esc>
repeatedly, <Esc> is NOT mapped in Aibo buffers. Instead:
  - Use <C-c> to send <Esc> to the AI tool (works in both normal and insert mode)
  - Use g<C-c> to send the interrupt signal (original <C-c> behavior, normal mode only)

Tip: When focused on the console window, entering insert mode automatically
opens the prompt window for input. This provides a seamless workflow - just
press 'i' in the console to start typing your next message.

To close the session, delete or wipeout the console buffer using
|:bdelete!| or |:bwipeout!| (the ! is required to force deletion). Simply
closing the console window will not terminate the process. Deleting the buffer
will terminate the process and automatically close the associated prompt
buffer.

						*aibo-argument-syntax*
Argument Syntax~

All Aibo commands support flexible argument syntax for options with values.
You can use quoted strings (single or double quotes) or escaped spaces:

Double quotes (interprets escape sequences like \n, \t):
>
	:AiboSend -prefix="Question:\n" -suffix="\nExplain."
	:AiboSend -prefix="```python\n" -suffix="\n```"
<
Single quotes (treats everything literally, no escape sequences):
>
	:AiboSend -prefix='Literal\n' -suffix='\nText'
	:Aibo -opener='botright split' claude
<
Escaped spaces (traditional Vim style):
>
	:Aibo -opener=botright\ split claude
	:AiboSend -prefix=Question:\  -suffix=\ Please\ explain.
<
Key differences between quote types:
- Double quotes ("): Interprets \n as newline, \t as tab, etc.
- Single quotes ('): Everything is literal, \n stays as \n
- Both allow spaces without escaping them individually


=============================================================================
CONFIGURATION					*aibo-configuration*

The plugin works out of the box without any configuration. Optionally, you
can call |aibo.setup()| in your configuration to customize the plugin.
The setup function can be called multiple times to update configuration:
>
	require('aibo').setup({
	  submit_delay = 100,    -- Delay before submit in ms (default: 100)
	  prompt_height = 10,    -- Height of prompt window (default: 10)
	})

	-- Can be called again later to update configuration
	require('aibo').setup({
	  tools = {
	    claude = {
	      no_default_mappings = true,
	    },
	  },
	})
<
Full configuration structure:
>
	require('aibo').setup({
	  -- Prompt buffer configuration
	  prompt = {
	    no_default_mappings = false,  -- Disable default keymaps
	    on_attach = function(bufnr, info)
	      -- Called when prompt buffer is created
	      -- Runs AFTER ftplugin files are loaded
	      -- info.type = "prompt"
	      -- info.tool = tool name
	      -- info.aibo = aibo instance
	    end,
	  },

	  -- Console buffer configuration
	  console = {
	    no_default_mappings = false,
	    on_attach = function(bufnr, info)
	      -- Called when console buffer is created
	      -- info.type = "console"
	    end,
	  },

	  -- Tool-specific overrides
	  tools = {
	    claude = {
	      no_default_mappings = false,
	      on_attach = function(bufnr, info)
	        -- Called after prompt/console on_attach
	      end,
	    },
	  },
	})
<
The `on_attach` callbacks run AFTER ftplugin files are loaded, allowing you
to override default settings and mappings.

=============================================================================
CUSTOMIZATION					*aibo-customization*

Default keymaps are defined in ftplugin files. You can customize them through
ftplugin files or the on_attach callback.

						*aibo-ftplugin-customization*
Using ftplugin files~

Create your own ftplugin files in `~/.config/nvim/after/ftplugin/` to
customize mappings. These files run after the plugin's ftplugin files,
allowing you to override or add to the default configuration.

Example: Customize prompt buffer mappings
>
	-- ~/.config/nvim/after/ftplugin/aibo-prompt.lua
	local bufnr = vim.api.nvim_get_current_buf()

	-- Override specific default mappings
	vim.keymap.del('n', '<C-n>', { buffer = bufnr })
	vim.keymap.del('n', '<C-p>', { buffer = bufnr })

	-- Add your custom mappings
	vim.keymap.set('n', '<Down>', '<Plug>(aibo-prompt-next)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<Up>', '<Plug>(aibo-prompt-prev)',
	               { buffer = bufnr })
<
Example: Add leader-based mappings for Claude
>
	-- ~/.config/nvim/after/ftplugin/aibo-tool-claude.lua
	local bufnr = vim.api.nvim_get_current_buf()

	-- Add leader-based mappings
	vim.keymap.set('n', '<leader>cm', '<Plug>(aibo-claude-mode)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>cv', '<Plug>(aibo-claude-verbose)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>ct', '<Plug>(aibo-claude-todo)',
	               { buffer = bufnr })
<
						*aibo-on-attach-customization*
Using on_attach callback~

Configure mappings through the setup function. The on_attach callback runs
AFTER ftplugin files are loaded.
>
	require('aibo').setup({
	  prompt = {
	    on_attach = function(bufnr)
	      -- Remove defaults
	      vim.keymap.del('n', '<C-n>', { buffer = bufnr })
	      vim.keymap.del('n', '<C-p>', { buffer = bufnr })

	      -- Add custom mappings
	      vim.keymap.set('n', '<Down>', '<Plug>(aibo-prompt-next)',
	                     { buffer = bufnr })
	      vim.keymap.set('n', '<Up>', '<Plug>(aibo-prompt-prev)',
	                     { buffer = bufnr })
	    end,
	  },
	})
<
						*aibo-disable-defaults*
Disabling default mappings~

Set `no_default_mappings = true` to disable default key mappings:
>
	require('aibo').setup({
	  prompt = {
	    no_default_mappings = true,
	    on_attach = function(bufnr)
	      -- Set your own mappings using <Plug> mappings
	      vim.keymap.set('n', '<Enter>', '<Plug>(aibo-prompt-submit)',
	                     { buffer = bufnr })
	    end,
	  },
	})
<
						*aibo-tool-specific*
Tool-specific configuration~

Configure tool-specific behavior through the setup function. Tool-specific
configurations have higher priority than buffer type configurations:
>
	require('aibo').setup({
	  tools = {
	    claude = {
	      no_default_mappings = true,
	      on_attach = function(bufnr, info)
	        vim.keymap.set('n', '<leader>m', '<Plug>(aibo-claude-mode)',
	                       { buffer = bufnr })
	        vim.keymap.set('n', '<leader>v', '<Plug>(aibo-claude-verbose)',
	                       { buffer = bufnr })
	      end,
	    },
	  },
	})
<
						*aibo-callback-order*
Callback Order~

When both buffer type and tool-specific `on_attach` callbacks are defined,
both are called in this order:

1. Buffer type on_attach (e.g., prompt.on_attach)
2. Tool-specific on_attach (e.g., tools.claude.on_attach)
						*aibo-custom-tools*
Adding custom tools~

Define new tools with their own configuration:
>
	require('aibo').setup({
	  tools = {
	    myai = {
	      no_default_mappings = false,
	      on_attach = function(bufnr, info)
	        vim.keymap.set('n', '<C-g>', function()
	          require('aibo').send('\007', bufnr)
	        end, { buffer = bufnr })
	      end,
	    },
	  },
	})
<

=============================================================================
INTERFACE					*aibo-interface*

-----------------------------------------------------------------------------
COMMANDS					*aibo-commands*

						*:Aibo*
:Aibo [{options}] {cmd} [{args}...]
	Start an interactive session with the specified command and optional
	arguments. Opens a terminal console running the command and creates
	a prompt buffer for user input. Works with ANY interactive CLI tool.

	-opener={cmd}		Use a custom window command:
				- split, vsplit, tabedit, edit
				- topleft\ split, botright\ vsplit
				- leftabove\ split, rightbelow\ vsplit

				Tip: You can use Vim script expressions
				with <C-r>= to calculate window sizes
				dynamically based on terminal dimensions.
				For example, to create a vertical split
				with 2/3 of the window width:
				:Aibo -opener="<C-r>=&columns * 2 / 3<CR>vsplit" claude

	-stay			Stay in the current window after opening
				the AI console. Useful when you want to
				continue editing while the AI loads.

	-toggle			Intelligently toggle console visibility:
				- If console exists and is visible: hide it
				- If console exists but hidden: show it
				- If console doesn't exist: create it

	-reuse			Reuse existing console or create new:
				- If console exists: focus it
				- If console doesn't exist: create it
				Always focuses the console window.

	Note: -toggle and -reuse are mutually exclusive.
	      Options with values support quoted strings for including spaces.

	Examples:
>
		" AI assistants with specialized support
		:Aibo claude
		:Aibo claude --continue
		:Aibo claude --model sonnet
		:Aibo codex --model claude-3.5-sonnet
		:Aibo ollama run llama3
		:Aibo ollama run qwen3:latest --verbose
		:Aibo gemini

		" Also works with any interactive CLI tool
		:Aibo python -i             " Python REPL
		:Aibo node --interactive    " Node.js REPL
		:Aibo psql mydatabase       " PostgreSQL client
		:Aibo sqlite3 data.db       " SQLite client
		:Aibo my-custom-tool        " Your custom tool

		" Using window control options
		:Aibo -opener=vsplit python -i
		:Aibo -stay psql mydatabase
		:Aibo -toggle claude
		:Aibo -reuse node --interactive

		" Dynamic window sizing with Vim script expressions
		:Aibo -opener="<C-r>=&columns * 2 / 3<CR>vsplit" claude
		:Aibo -opener="<C-r>=&lines / 2<CR>split" codex
		:Aibo -opener="botright <C-r>=&lines / 3<CR>split" ollama run llama3
<
						*aibo-completion*
	Intelligent Command Completion~

	The plugin provides comprehensive tab completion for some AI tools:

	- Tool names: Press <Tab> after ":Aibo " to see available tools
	- Subcommands: Complete subcommands (e.g., "run" for ollama)
	- Arguments: Complete available flags and options
	- Values: Complete predefined values (models, modes, etc.)
	- Models: For ollama, auto-completes installed model names
	- Files/Directories: Smart completion for file arguments

	Completion examples:
>
		:Aibo <Tab>                  " Shows: claude, codex, ollama
		:Aibo claude --<Tab>         " Shows all Claude arguments
		:Aibo claude --model <Tab>   " Shows: sonnet, opus, haiku...
		:Aibo ollama <Tab>           " Shows: run
		:Aibo ollama run <Tab>       " Shows models and flags
		:Aibo ollama run q<Tab>      " Completes to: qwen3:latest
		:Aibo codex --sandbox <Tab>  " Shows: none, read-only...
<
						*aibo-claude-arguments*
	Claude Arguments~

	--continue, -c        Continue the most recent conversation
	--resume, -r {id}     Resume a specific conversation
	--fork-session        Create new session ID when resuming
	--verbose             Override verbose mode setting
	--model {model}       Choose model:
	                      sonnet, opus, haiku,
	                      claude-3-5-sonnet-latest,
	                      claude-3-5-haiku-latest,
	                      claude-3-opus-latest
	--permission-mode {m} Permission mode:
	                      default, acceptEdits,
	                      bypassPermissions, plan
	--add-dir {dir}       Additional directories for tool access
	--ide                 Auto-connect to IDE on startup
	--settings {file}     Path to settings JSON file
	--allowed-tools       Comma-separated list of allowed tools
	--disallowed-tools    Comma-separated list of denied tools

						*aibo-codex-arguments*
	Codex Arguments~

	--model, -m {model}   Choose model:
	                      o3, claude-3.5-sonnet,
	                      gpt-4-turbo, gemini-pro
	--config, -c {val}    Override configuration value
	--profile, -p {name}  Configuration profile from config.toml
	--sandbox, -s {mode}  Sandbox policy:
	                      none, read-only, restricted, full
	--oss                 Use local Ollama provider
	--image, -i {file}    Attach image(s) to initial prompt
	resume                Resume a previous session
	resume --last         Resume the most recent session

						*aibo-ollama-arguments*
	Ollama Arguments~

	Ollama requires the "run" subcommand followed by a model name:
>
		:Aibo ollama run llama3.2
		:Aibo ollama run mistral --verbose
<
	Models are auto-completed from locally installed models.
	Use "ollama list" to see available models.

	Options:
	--format {fmt}        Response format (e.g., json)
	--hidethinking        Hide thinking output
	--keepalive {dur}     Duration to keep model loaded:
	                      5m, 10m, 30m, 1h, 24h
	--nowordwrap          Don't wrap words automatically
	--think {level}       Enable thinking mode:
	                      true, false, high, medium, low
	--verbose             Show response timings


						*:AiboSend*
:AiboSend [{options}]
:{range}AiboSend [{options}]
	Send buffer content to an Aibo console prompt. Without a range,
	sends the entire buffer. With a range, sends only the specified lines.

	Options:~
		-input		Open prompt window and enter insert mode
		-submit		Submit content immediately after sending
		-replace	Replace prompt content instead of appending
		-prefix={text}	Add text before the content
		-suffix={text}	Add text after the content

	Note: -input and -submit can be combined. When used together, the
	      content will be submitted and the prompt will immediately
	      reopen for additional input.

	Note: Options with values support flexible quoting syntax:
	      - Double quotes (") interpret escape sequences (\n, \t)
	      - Single quotes (') treat everything literally
	      - Escaped spaces for traditional Vim style

	Examples:
>
		:AiboSend                   " Send whole buffer
		:'<,'>AiboSend              " Send visual selection
		:10,20AiboSend              " Send lines 10-20
		:AiboSend -input            " Send and open prompt
		:AiboSend -submit           " Send and submit
		:AiboSend -replace -submit  " Replace and submit
		:AiboSend -input -submit    " Submit and reopen for input
		:AiboSend -prefix="Question:\n" -suffix="\nPlease explain."
		:'<,'>AiboSend -prefix="```python\n" -suffix="\n```"
		:AiboSend -prefix='Literal\n' -suffix='\nText'
		:AiboSend -prefix=Question:\  -suffix=\ Please\ explain.
<
	If multiple Aibo consoles are open in the current tabpage, you'll
	be prompted to select which one to send to.

-----------------------------------------------------------------------------
FUNCTIONS					*aibo-functions*

						*aibo.setup()*
aibo.setup({config})
	Configure the plugin. Optional - the plugin works with defaults if
	not called. Can be called multiple times to update configuration.
	Each call merges the new options with the existing configuration.
>
		require('aibo').setup({
		  submit_delay = 100,
		  prompt_height = 10,
		})
<
	Parameters:~
		{config}  Table with configuration options

						*aibo.send()*
aibo.send({data}, {bufnr})
	Send raw data to the terminal buffer.
>
		require('aibo').send('Hello\n', bufnr)
<
	Parameters:~
		{data}   String data to send
		{bufnr}  Buffer number (optional, defaults to current)

						*aibo.submit()*
aibo.submit({data}, {bufnr})
	Submit data with automatic return key appended.
>
		require('aibo').submit('What is Neovim?', bufnr)
<
	Parameters:~
		{data}   String data to submit
		{bufnr}  Buffer number (optional, defaults to current)

						*aibo.get_config()*
aibo.get_config()
	Get the current configuration.
>
		local config = require('aibo').get_config()
		print(config.submit_delay)
<
	Returns:~
		Configuration table

						*aibo.get_tool_config()*
aibo.get_tool_config({tool})
	Get configuration for a specific tool.
>
		local cfg = require('aibo').get_tool_config('claude')
<
	Parameters:~
		{tool}    Tool name (e.g., "claude", "codex")

	Returns:~
		Tool configuration table

						*aibo.get_buffer_config()*
aibo.get_buffer_config({buftype})
	Get configuration for a specific buffer type.
>
		local cfg = require('aibo').get_buffer_config('prompt')
<
	Parameters:~
		{buftype}  "prompt" or "console"

	Returns:~
		Buffer type configuration table

-----------------------------------------------------------------------------
KEY MAPPINGS					*aibo-key-mappings*

Default key mappings are defined in ftplugin files. These can be customized
through configuration (see |aibo-customization|).

Console buffer mappings:
	<CR>		Submit empty line (n)
	<C-c>		Send ESC to terminal (n/i)
	g<C-c>		Send interrupt signal (n)
	<C-l>		Clear terminal (n)
	<C-n>		Navigate to next in history (n)
	<C-p>		Navigate to previous in history (n)
	<Down>		Send down arrow (n)
	<Up>		Send up arrow (n)

Prompt buffer mappings:
	<CR>		Submit content (n)
	<C-Enter>	Submit and close (n/i)
	<F5>		Submit and close (n/i)
	:w		Submit content (command)
	:wq		Submit and close (command)

Claude tool mappings:
	<S-Tab>		Switch mode (n/i)
	<F2>		Switch mode alternative (n/i)
	<C-o>		Toggle verbose (n/i)
	<C-t>		Show todo (n/i)
	<C-_>		Undo (n/i, also <C-->)
	<C-v>		Paste (n/i)
	?		Show shortcuts (n)
	!		Enter bash mode (n)
	#		Memorize context (n)

Codex tool mappings:
	<C-t>		Show transcript (n/i)
	<Home>		Move to beginning (n/i)
	<End>		Move to end (n/i)
	<PageUp>	Page up (n/i)
	<PageDown>	Page down (n/i)
	q		Quit (n)

Note: Some key combinations require modern terminal emulators. Use
alternatives like <F5> if certain combinations don't work.

-----------------------------------------------------------------------------
PLUG MAPPINGS					*aibo-plug-mappings*

All functionality is exposed through <Plug> mappings defined in ftplugin
files. These can be used to create custom key mappings.

						*aibo-plug-prompt*
Prompt buffer <Plug> mappings~

	<Plug>(aibo-prompt-submit)		Submit prompt
	<Plug>(aibo-prompt-submit-close)	Submit and close
	<Plug>(aibo-prompt-esc)			Send ESC to tool
	<Plug>(aibo-prompt-interrupt)		Interrupt tool
	<Plug>(aibo-prompt-clear)		Clear screen
	<Plug>(aibo-prompt-next)		Next history
	<Plug>(aibo-prompt-prev)		Previous history
	<Plug>(aibo-prompt-down)		Move down
	<Plug>(aibo-prompt-up)			Move up

						*aibo-plug-console*
Console buffer <Plug> mappings~

	<Plug>(aibo-console-submit)		Submit empty message
	<Plug>(aibo-console-close)		Close console
	<Plug>(aibo-console-esc)		Send ESC to tool
	<Plug>(aibo-console-interrupt)		Interrupt tool
	<Plug>(aibo-console-clear)		Clear screen
	<Plug>(aibo-console-next)		Next history
	<Plug>(aibo-console-prev)		Previous history
	<Plug>(aibo-console-down)		Move down
	<Plug>(aibo-console-up)			Move up

						*aibo-plug-claude*
Claude tool <Plug> mappings~

	<Plug>(aibo-claude-mode)		Toggle mode
	<Plug>(aibo-claude-verbose)		Toggle verbose
	<Plug>(aibo-claude-todo)		Show todo
	<Plug>(aibo-claude-undo)		Undo
	<Plug>(aibo-claude-paste)		Paste
	<Plug>(aibo-claude-shortcuts)		Show shortcuts
	<Plug>(aibo-claude-bash-mode)		Enter bash mode
	<Plug>(aibo-claude-memorize)		Memorize context

						*aibo-plug-codex*
Codex tool <Plug> mappings~

	<Plug>(aibo-codex-transcript)		Show transcript
	<Plug>(aibo-codex-home)			Home
	<Plug>(aibo-codex-end)			End
	<Plug>(aibo-codex-page-up)		Page up
	<Plug>(aibo-codex-page-down)		Page down
	<Plug>(aibo-codex-quit)			Quit

Example usage:
>
	vim.keymap.set('n', '<C-j>', '<Plug>(aibo-prompt-submit)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>m', '<Plug>(aibo-claude-mode)',
	               { buffer = bufnr })
<

-----------------------------------------------------------------------------
CUSTOM MAPPINGS					*aibo-custom-mappings*

When creating custom mappings that send keys to the terminal, you MUST use
`aibo.termcode.resolve()` instead of `vim.api.nvim_replace_termcodes()`.

						*aibo-termcode*
Why use aibo.termcode.resolve()~

The built-in `nvim_replace_termcodes()` returns Neovim's internal key
representations, which terminal programs cannot understand. The
`aibo.termcode.resolve()` function converts Vim key notation to actual ANSI
escape sequences that terminals expect.

Example difference:
- nvim_replace_termcodes("<Up>") returns "\x80\x6B\x75" (internal code)
- aibo.termcode.resolve("<Up>") returns "\27[A" (ANSI escape sequence)

						*aibo-custom-mapping-example*
Creating custom key mappings~

>
	local aibo = require("aibo")

	-- Send navigation keys to terminal
	vim.keymap.set('n', '<leader>au', function()
	  aibo.send(aibo.termcode.resolve("<Up>"), bufnr)
	end, { buffer = bufnr, desc = "Send Up arrow" })

	-- Send control sequences
	vim.keymap.set('n', '<leader>ac', function()
	  aibo.send(aibo.termcode.resolve("<C-c>"), bufnr)
	end, { buffer = bufnr, desc = "Interrupt process" })

	-- Send multiple keys
	vim.keymap.set('n', '<leader>ah', function()
	  local keys = aibo.termcode.resolve("<Home><S-End>")
	  aibo.send(keys, bufnr)
	end, { buffer = bufnr, desc = "Select to end of line" })
<

Supported key formats:
- Navigation: <Up>, <Down>, <Left>, <Right>, <Home>, <End>
- Pages: <PageUp>, <PageDown>
- Function: <F1> through <F12>
- Control: <C-a>, <C-c>, <C-l>, etc.
- Modified: <S-Tab>, <C-Left>, <A-Up>, <C-S-F5>, etc.
- Special: <CR>, <Tab>, <Esc>, <Space>, <BS>

=============================================================================
HEALTH CHECK					*aibo-health*

Run `:checkhealth aibo` to diagnose your aibo installation.

The health check will verify:
- Neovim version compatibility (0.10.0+)
- Plugin installation status
- Configuration loading
- Available AI tool CLI tools
- Terminal feature support
- Ftplugin file presence

This is useful for troubleshooting issues with the plugin or verifying that
your environment is properly configured for using aibo.

=============================================================================
FAQ						*aibo-faq*

Q: Why does aibo require Neovim 0.10.0+?
A: The plugin uses modern Lua APIs and terminal features introduced in
   Neovim 0.10.0 for optimal performance and reliability.

Q: Can I use aibo with any AI tool?
A: Yes! Aibo is designed for AI assistants and provides specialized support
   for Claude, Codex, and Ollama with tool-specific key mappings and smart
   completions. It also works with Gemini and any other command-line AI tool
   that accepts text input via stdin and provides output via stdout.

Q: Can I use aibo with non-AI interactive tools?
A: Absolutely! While aibo is optimized for AI assistants, it works with any
   interactive CLI tool including REPLs (Python, Node, Ruby), database
   clients (PostgreSQL, MySQL, SQLite), and custom interactive applications.

Q: How do I customize key mappings?
A: You have several options:
   1. Set `no_default_mappings = true` and define your own mappings
   2. Override specific mappings in the `on_attach` callback
   3. Use <Plug> mappings to create custom key bindings
   See |aibo-customization| for detailed examples.

Q: What's the difference between <Plug>(aibo-prompt-next) and
   <Plug>(aibo-prompt-down)?
A: `next` sends <C-n> for history navigation, while `down` sends <Down>
   for cursor movement. Similarly for `prev` vs `up`.

Q: Why don't some key combinations work?
A: Some key combinations like <C-Enter> and <S-Tab> require modern terminal
   emulators (Kitty, WezTerm, Ghostty). Use alternatives like <F5> if these
   don't work in your terminal.

Q: Can I have multiple AI sessions open?
A: Yes, you can have multiple sessions with different tools or multiple
   instances of the same tool.

Q: How do I terminate an AI session?
A: Use `:bdelete!` or `:bwipeout!` on the console buffer. The exclamation
   mark is required to force deletion. This will terminate the process and
   close the associated prompt buffer.

=============================================================================
DEVELOPER DOCUMENTATION				*aibo-dev*

For comprehensive developer documentation including:
- Architecture and module structure
- API reference
- Testing guidelines
- Development workflow
- How to add new integrations

See |aibo-dev.txt|

Quick links:
- Architecture: |aibo-dev-architecture|
- API Reference: |aibo-dev-api|
- Testing: |aibo-dev-testing|
- Contributing: |aibo-dev-contributing|
- Adding Integrations: |aibo-dev-new-integration|

==============================================================================
vim:tw=78:ts=8:ft=help:norl:

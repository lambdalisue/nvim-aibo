*aibo.txt*	AI Bot Integration and Orchestration for Neovim

Author:  lambdalisue <lambdalisue@gmail.com>
License: MIT license

=============================================================================
CONTENTS					*aibo-contents*

INTRODUCTION				|aibo-introduction|
REQUIREMENTS				|aibo-requirements|
USAGE					|aibo-usage|
CONFIGURATION				|aibo-configuration|
CUSTOMIZATION				|aibo-customization|
INTERFACE				|aibo-interface|
  COMMANDS				|aibo-commands|
  FUNCTIONS				|aibo-functions|
  KEY MAPPINGS				|aibo-key-mappings|
  PLUG MAPPINGS				|aibo-plug-mappings|
HEALTH CHECK				|aibo-health|
FAQ					|aibo-faq|

=============================================================================
INTRODUCTION					*aibo-introduction*

*aibo.vim* (*aibo*) is a Neovim plugin that provides seamless integration
with AI assistants through terminal interfaces. The name "aibo" comes from
the Japanese word for "companion," reflecting the plugin's role as your AI
companion in Neovim. This plugin is written in Lua for optimal performance
and maintainability.

The plugin creates a split-window interface with:
- A terminal console where AI agents run
- A dedicated prompt buffer for user input
- Smart key mappings for efficient interaction

Key features:
- Cross-platform support for Neovim
- Flexible AI agent integration
- Customizable key mappings through ftplugins
- Clean separation between console and prompt
- Automatic buffer management

=============================================================================
REQUIREMENTS					*aibo-requirements*

- Neovim 0.10.0+ (required for full Lua implementation)
- AI agent executable (e.g., claude, chatgpt, copilot CLI tools)

=============================================================================
USAGE						*aibo-usage*

Start an AI session with the |:Aibo| command:
>
	:Aibo claude
<
This opens a terminal console running the specified AI agent and creates a
prompt buffer below it for your input.

Type your message in the prompt buffer and press |<CR>| in normal mode to
submit. You can also use |<F5>| or |<C-Enter>| to submit from insert mode.
The message will be sent to the AI agent and the prompt buffer will be
cleared for your next input.

To close the session, delete or wipeout the console buffer using
|:bdelete!| or |:bwipeout!| (the ! is required to force deletion). Simply
closing the console window will not terminate the AI agent process. Deleting
the buffer will terminate the process and automatically close the associated
prompt buffer.

=============================================================================
CONFIGURATION					*aibo-configuration*

The plugin works out of the box without any configuration. Optionally, you
can call |aibo.setup()| in your configuration to customize the plugin.
The setup function can be called multiple times to update configuration:
>
	require('aibo').setup({
	  submit_delay = 100,    -- Delay before submit in ms (default: 100)
	  prompt_height = 10,    -- Height of prompt window (default: 10)
	})

	-- Can be called again later to update configuration
	require('aibo').setup({
	  agents = {
	    claude = {
	      no_default_mappings = true,
	    },
	  },
	})
<
Full configuration structure:
>
	require('aibo').setup({
	  -- Prompt buffer configuration
	  prompt = {
	    no_default_mappings = false,  -- Disable default keymaps
	    on_attach = function(bufnr, info)
	      -- Called when prompt buffer is created
	      -- Runs AFTER ftplugin files are loaded
	      -- info.type = "prompt"
	      -- info.agent = agent name
	      -- info.aibo = aibo instance
	    end,
	  },

	  -- Console buffer configuration
	  console = {
	    no_default_mappings = false,
	    on_attach = function(bufnr, info)
	      -- Called when console buffer is created
	      -- info.type = "console"
	    end,
	  },

	  -- Agent-specific overrides
	  agents = {
	    claude = {
	      no_default_mappings = false,
	      on_attach = function(bufnr, info)
	        -- Called after prompt/console on_attach
	      end,
	    },
	  },
	})
<
The `on_attach` callbacks run AFTER ftplugin files are loaded, allowing you
to override default settings and mappings.

=============================================================================
CUSTOMIZATION					*aibo-customization*

Default keymaps are defined in ftplugin files. You can customize them through
ftplugin files or the on_attach callback.

						*aibo-ftplugin-customization*
Using ftplugin files~

Create your own ftplugin files in `~/.config/nvim/after/ftplugin/` to
customize mappings. These files run after the plugin's ftplugin files,
allowing you to override or add to the default configuration.

Example: Customize prompt buffer mappings
>
	-- ~/.config/nvim/after/ftplugin/aibo-prompt.lua
	local bufnr = vim.api.nvim_get_current_buf()

	-- Override specific default mappings
	vim.keymap.del('n', '<C-n>', { buffer = bufnr })
	vim.keymap.del('n', '<C-p>', { buffer = bufnr })

	-- Add your custom mappings
	vim.keymap.set('n', '<Down>', '<Plug>(aibo-prompt-next)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<Up>', '<Plug>(aibo-prompt-prev)',
	               { buffer = bufnr })
<
Example: Add leader-based mappings for Claude
>
	-- ~/.config/nvim/after/ftplugin/aibo-agent-claude.lua
	local bufnr = vim.api.nvim_get_current_buf()

	-- Add leader-based mappings
	vim.keymap.set('n', '<leader>cm', '<Plug>(aibo-claude-mode)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>cv', '<Plug>(aibo-claude-verbose)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>ct', '<Plug>(aibo-claude-todo)',
	               { buffer = bufnr })
<
						*aibo-on-attach-customization*
Using on_attach callback~

Configure mappings through the setup function. The on_attach callback runs
AFTER ftplugin files are loaded.
>
	require('aibo').setup({
	  prompt = {
	    on_attach = function(bufnr)
	      -- Remove defaults
	      vim.keymap.del('n', '<C-n>', { buffer = bufnr })
	      vim.keymap.del('n', '<C-p>', { buffer = bufnr })

	      -- Add custom mappings
	      vim.keymap.set('n', '<Down>', '<Plug>(aibo-prompt-next)',
	                     { buffer = bufnr })
	      vim.keymap.set('n', '<Up>', '<Plug>(aibo-prompt-prev)',
	                     { buffer = bufnr })
	    end,
	  },
	})
<
						*aibo-disable-defaults*
Disabling default mappings~

Set `no_default_mappings = true` to disable default key mappings:
>
	require('aibo').setup({
	  prompt = {
	    no_default_mappings = true,
	    on_attach = function(bufnr)
	      -- Set your own mappings using <Plug> mappings
	      vim.keymap.set('n', '<Enter>', '<Plug>(aibo-prompt-submit)',
	                     { buffer = bufnr })
	    end,
	  },
	})
<
						*aibo-agent-specific*
Agent-specific configuration~

Configure agent-specific behavior through the setup function:
>
	require('aibo').setup({
	  agents = {
	    claude = {
	      no_default_mappings = true,
	      on_attach = function(bufnr, info)
	        vim.keymap.set('n', '<leader>m', '<Plug>(aibo-claude-mode)',
	                       { buffer = bufnr })
	        vim.keymap.set('n', '<leader>v', '<Plug>(aibo-claude-verbose)',
	                       { buffer = bufnr })
	      end,
	    },
	  },
	})
<
						*aibo-custom-agents*
Adding custom agents~

Define new agents with their own configuration:
>
	require('aibo').setup({
	  agents = {
	    myai = {
	      no_default_mappings = false,
	      on_attach = function(bufnr, info)
	        vim.keymap.set('n', '<C-g>', function()
	          require('aibo').send('\007', bufnr)
	        end, { buffer = bufnr })
	      end,
	    },
	  },
	})
<

=============================================================================
INTERFACE					*aibo-interface*

-----------------------------------------------------------------------------
COMMANDS					*aibo-commands*

						*:Aibo*
:Aibo {cmd} [{args}...]
	Start an AI session with the specified command and optional arguments.
	Opens a terminal console running the command and creates a prompt
	buffer for user input.

	Examples:
>
		:Aibo claude
		:Aibo claude --continue
		:Aibo claude --model sonnet
		:Aibo claude --permission-mode plan
		:Aibo codex --model claude-3.5-sonnet
		:Aibo codex resume --last
		:Aibo ollama run llama3
		:Aibo ollama run qwen3:latest --verbose
<
						*aibo-completion*
	Intelligent Command Completion~

	The plugin provides comprehensive tab completion for all AI tools:

	- Tool names: Press <Tab> after ":Aibo " to see available tools
	- Subcommands: Complete subcommands (e.g., "run" for ollama)
	- Arguments: Complete available flags and options
	- Values: Complete predefined values (models, modes, etc.)
	- Models: For ollama, auto-completes installed model names
	- Files/Directories: Smart completion for file arguments

	Completion examples:
>
		:Aibo <Tab>                  " Shows: claude, codex, ollama
		:Aibo claude --<Tab>         " Shows all Claude arguments
		:Aibo claude --model <Tab>   " Shows: sonnet, opus, haiku...
		:Aibo ollama <Tab>           " Shows: run
		:Aibo ollama run <Tab>       " Shows models and flags
		:Aibo ollama run q<Tab>      " Completes to: qwen3:latest
		:Aibo codex --sandbox <Tab>  " Shows: none, read-only...
<
						*aibo-claude-arguments*
	Claude Arguments~

	--continue, -c        Continue the most recent conversation
	--resume, -r {id}     Resume a specific conversation
	--fork-session        Create new session ID when resuming
	--verbose             Override verbose mode setting
	--model {model}       Choose model:
	                      sonnet, opus, haiku,
	                      claude-3-5-sonnet-latest,
	                      claude-3-5-haiku-latest,
	                      claude-3-opus-latest
	--permission-mode {m} Permission mode:
	                      default, acceptEdits,
	                      bypassPermissions, plan
	--add-dir {dir}       Additional directories for tool access
	--ide                 Auto-connect to IDE on startup
	--settings {file}     Path to settings JSON file
	--allowed-tools       Comma-separated list of allowed tools
	--disallowed-tools    Comma-separated list of denied tools

						*aibo-codex-arguments*
	Codex Arguments~

	--model, -m {model}   Choose model:
	                      o3, claude-3.5-sonnet,
	                      gpt-4-turbo, gemini-pro
	--config, -c {val}    Override configuration value
	--profile, -p {name}  Configuration profile from config.toml
	--sandbox, -s {mode}  Sandbox policy:
	                      none, read-only, restricted, full
	--oss                 Use local Ollama provider
	--image, -i {file}    Attach image(s) to initial prompt
	resume                Resume a previous session
	resume --last         Resume the most recent session

						*aibo-ollama-arguments*
	Ollama Arguments~

	Ollama requires the "run" subcommand followed by a model name:
>
		:Aibo ollama run llama3.2
		:Aibo ollama run mistral --verbose
<
	Models are auto-completed from locally installed models.
	Use "ollama list" to see available models.

	Options:
	--format {fmt}        Response format (e.g., json)
	--hidethinking        Hide thinking output
	--keepalive {dur}     Duration to keep model loaded:
	                      5m, 10m, 30m, 1h, 24h
	--nowordwrap          Don't wrap words automatically
	--think {level}       Enable thinking mode:
	                      true, false, high, medium, low
	--verbose             Show response timings
-----------------------------------------------------------------------------
FUNCTIONS					*aibo-functions*

						*aibo.setup()*
aibo.setup({config})
	Configure the plugin. Optional - the plugin works with defaults if
	not called. Can be called multiple times to update configuration.
	Each call merges the new options with the existing configuration.
>
		require('aibo').setup({
		  submit_delay = 100,
		  prompt_height = 10,
		})
<
	Parameters:~
		{config}  Table with configuration options

						*aibo.send()*
aibo.send({data}, {bufnr})
	Send raw data to the terminal buffer.
>
		require('aibo').send('Hello\n', bufnr)
<
	Parameters:~
		{data}   String data to send
		{bufnr}  Buffer number (optional, defaults to current)

						*aibo.submit()*
aibo.submit({data}, {bufnr})
	Submit data with automatic return key appended.
>
		require('aibo').submit('What is Neovim?', bufnr)
<
	Parameters:~
		{data}   String data to submit
		{bufnr}  Buffer number (optional, defaults to current)

						*aibo.get_config()*
aibo.get_config()
	Get the current configuration.
>
		local config = require('aibo').get_config()
		print(config.submit_delay)
<
	Returns:~
		Configuration table

						*aibo.get_agent_config()*
aibo.get_agent_config({agent})
	Get configuration for a specific agent.
>
		local cfg = require('aibo').get_agent_config('claude')
<
	Parameters:~
		{agent}    Agent name (e.g., "claude", "codex")

	Returns:~
		Agent configuration table

						*aibo.get_buffer_config()*
aibo.get_buffer_config({buftype}, {agent})
	Get configuration for a specific buffer type and agent.
>
		local cfg = require('aibo').get_buffer_config('prompt', 'claude')
<
	Parameters:~
		{buftype}  "prompt" or "console"
		{agent}    Agent name (e.g., "claude", "codex")

	Returns:~
		Buffer configuration table

-----------------------------------------------------------------------------
KEY MAPPINGS					*aibo-key-mappings*

Default key mappings are defined in ftplugin files. These can be customized
through configuration (see |aibo-customization|).

Console buffer mappings (normal mode):
	<CR>		Submit empty line
	<Esc>		Send ESC to terminal
	<C-c>		Send interrupt signal
	<C-l>		Clear terminal
	<C-n>		Navigate to next in history
	<C-p>		Navigate to previous in history
	<Down>		Send down arrow
	<Up>		Send up arrow

Prompt buffer mappings:
	<CR>		Submit content (normal mode)
	<C-Enter>	Submit and close (normal/insert mode)
	<F5>		Submit and close (normal/insert mode)
	:w		Submit content (command)
	:wq		Submit and close (command)

Claude agent mappings (normal and insert mode):
	<S-Tab>		Switch mode
	<F2>		Switch mode (alternative)
	<C-o>		Toggle verbose
	<C-t>		Show todo
	<C-_>		Undo (also <C-->)
	<C-z>		Suspend
	<C-v>		Paste
	?		Show shortcuts
	!		Enter bash mode
	#		Memorize context

Codex agent mappings:
	<C-t>		Show transcript (normal/insert mode)
	<Home>		Move to beginning (normal/insert mode)
	<End>		Move to end (normal/insert mode)
	<PageUp>	Page up (normal/insert mode)
	<PageDown>	Page down (normal/insert mode)
	q		Quit (normal mode only)

Note: Some key combinations require modern terminal emulators. Use
alternatives like <F5> if certain combinations don't work.

-----------------------------------------------------------------------------
PLUG MAPPINGS					*aibo-plug-mappings*

All functionality is exposed through <Plug> mappings defined in ftplugin
files. These can be used to create custom key mappings.

						*aibo-plug-prompt*
Prompt buffer <Plug> mappings~

	<Plug>(aibo-prompt-submit)		Submit prompt
	<Plug>(aibo-prompt-submit-close)	Submit and close
	<Plug>(aibo-prompt-esc)		Send ESC to agent
	<Plug>(aibo-prompt-interrupt)		Interrupt agent
	<Plug>(aibo-prompt-clear)		Clear screen
	<Plug>(aibo-prompt-next)		Next history
	<Plug>(aibo-prompt-prev)		Previous history
	<Plug>(aibo-prompt-down)		Move down
	<Plug>(aibo-prompt-up)			Move up

						*aibo-plug-console*
Console buffer <Plug> mappings~

	<Plug>(aibo-console-submit)		Submit empty message
	<Plug>(aibo-console-close)		Close console
	<Plug>(aibo-console-esc)		Send ESC to agent
	<Plug>(aibo-console-interrupt)		Interrupt agent
	<Plug>(aibo-console-clear)		Clear screen
	<Plug>(aibo-console-next)		Next history
	<Plug>(aibo-console-prev)		Previous history
	<Plug>(aibo-console-down)		Move down
	<Plug>(aibo-console-up)			Move up

						*aibo-plug-claude*
Claude agent <Plug> mappings~

	<Plug>(aibo-claude-mode)		Toggle mode
	<Plug>(aibo-claude-verbose)		Toggle verbose
	<Plug>(aibo-claude-todo)		Show todo
	<Plug>(aibo-claude-undo)		Undo
	<Plug>(aibo-claude-suspend)		Suspend
	<Plug>(aibo-claude-paste)		Paste
	<Plug>(aibo-claude-shortcuts)		Show shortcuts
	<Plug>(aibo-claude-bash-mode)		Enter bash mode
	<Plug>(aibo-claude-memorize)		Memorize context

						*aibo-plug-codex*
Codex agent <Plug> mappings~

	<Plug>(aibo-codex-transcript)		Show transcript
	<Plug>(aibo-codex-home)			Home
	<Plug>(aibo-codex-end)			End
	<Plug>(aibo-codex-page-up)		Page up
	<Plug>(aibo-codex-page-down)		Page down
	<Plug>(aibo-codex-quit)			Quit

Example usage:
>
	vim.keymap.set('n', '<C-j>', '<Plug>(aibo-prompt-submit)',
	               { buffer = bufnr })
	vim.keymap.set('n', '<leader>m', '<Plug>(aibo-claude-mode)',
	               { buffer = bufnr })
<

=============================================================================
HEALTH CHECK					*aibo-health*

Run `:checkhealth aibo` to diagnose your aibo.nvim installation.

The health check will verify:
- Neovim version compatibility (0.10.0+)
- Plugin installation status
- Configuration loading
- Available AI agent CLI tools
- Terminal feature support
- Ftplugin file presence

This is useful for troubleshooting issues with the plugin or verifying that
your environment is properly configured for using aibo.nvim.

=============================================================================
FAQ						*aibo-faq*

Q: Why does aibo require Neovim 0.10.0+?
A: The plugin uses modern Lua APIs and terminal features introduced in
   Neovim 0.10.0 for optimal performance and reliability.

Q: Can I use aibo with any AI tool?
A: Yes! Aibo works with any command-line AI tool that accepts text input
   via stdin and provides output via stdout.

Q: How do I customize key mappings?
A: You have several options:
   1. Set `no_default_mappings = true` and define your own mappings
   2. Override specific mappings in the `on_attach` callback
   3. Use <Plug> mappings to create custom key bindings
   See |aibo-customization| for detailed examples.

Q: What's the difference between <Plug>(aibo-prompt-next) and
   <Plug>(aibo-prompt-down)?
A: `next` sends <C-n> for history navigation, while `down` sends <Down>
   for cursor movement. Similarly for `prev` vs `up`.

Q: Why don't some key combinations work?
A: Some key combinations like <C-Enter> and <S-Tab> require modern terminal
   emulators (Kitty, WezTerm, Ghostty). Use alternatives like <F5> if these
   don't work in your terminal.

Q: Can I have multiple AI sessions open?
A: Yes, you can have multiple sessions with different agents or multiple
   instances of the same agent.

Q: How do I terminate an AI session?
A: Use `:bdelete!` or `:bwipeout!` on the console buffer. The exclamation
   mark is required to force deletion. This will terminate the process and
   close the associated prompt buffer.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:

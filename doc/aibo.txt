*aibo.txt*	AI Bot Integration and Orchestration for Neovim

Author:  lambdalisue <lambdalisue@gmail.com>
License: MIT license

=============================================================================
CONTENTS					*aibo-contents*

INTRODUCTION				|aibo-introduction|
REQUIREMENTS				|aibo-requirements|
USAGE					|aibo-usage|
CONFIGURATION				|aibo-configuration|
CUSTOMIZATION				|aibo-customization|
INTERFACE				|aibo-interface|
  COMMANDS				|aibo-commands|
  FUNCTIONS				|aibo-functions|
  KEY MAPPINGS				|aibo-key-mappings|
  ACTIONS				|aibo-actions|
FAQ					|aibo-faq|

=============================================================================
INTRODUCTION					*aibo-introduction*

*aibo.vim* (*aibo*) is a Neovim plugin that provides seamless integration
with AI assistants through terminal interfaces. The name "aibo" comes from
the Japanese word for "companion," reflecting the plugin's role as your AI
companion in Neovim. This plugin is written in Lua for optimal performance
and maintainability.

The plugin creates a split-window interface with:
- A terminal console where AI agents run
- A dedicated prompt buffer for user input
- Smart key mappings for efficient interaction

Key features:
- Cross-platform support for Neovim
- Flexible AI agent integration
- Customizable submission keys and delays
- Clean separation between console and prompt
- Automatic buffer management

=============================================================================
REQUIREMENTS					*aibo-requirements*

- Neovim 0.10.0+ (required for full Lua implementation)
- AI agent executable (e.g., claude, chatgpt, copilot CLI tools)

=============================================================================
USAGE						*aibo-usage*

Start an AI session with the |:Aibo| command:
>
	:Aibo claude
<
This opens a terminal console running the specified AI agent and creates a
prompt buffer below it for your input.

Type your message in the prompt buffer and press |<CR>| in normal mode to
submit. You can also use |<F5>| or |<C-Enter>| to submit from insert mode.
The message will be sent to the AI agent and the prompt buffer will be
cleared for your next input.

To close the session, delete or wipeout the console buffer using
|:bdelete!| or |:bwipeout!| (the ! is required to force deletion). Simply
closing the console window will not terminate the AI agent process. Deleting
the buffer will terminate the process and automatically close the associated
prompt buffer.

=============================================================================
CONFIGURATION					*aibo-configuration*

Call |aibo.setup()| in your configuration to initialize the plugin:
>
	require('aibo').setup({
	  submit_delay = 100,    -- Delay before submit in ms (default: 100)
	  prompt_height = 10,    -- Height of prompt window (default: 10)
	})
<
Full configuration structure:
>
	require('aibo').setup({
	  -- Prompt buffer configuration
	  prompt = {
	    keymaps = {
	      submit = "<CR>",                        -- Single key
	      submit_close = { "<C-Enter>", "<F5>" }, -- Multiple keys
	      interrupt = "<C-c>",
	      clear = "<C-l>",
	      next = "<C-n>",
	      prev = "<C-p>",
	      down = "<Down>",
	      up = "<Up>",
	    },
	    buffer_options = {     -- vim.bo options
	      textwidth = 80,
	      expandtab = true,
	    },
	    window_options = {     -- vim.wo options
	      number = false,
	      signcolumn = "no",
	    },
	    on_attach = function(bufnr, info)
	      -- Called when prompt buffer is created
	    end,
	  },

	  -- Console buffer configuration (similar structure)
	  console = { ... },

	  -- Agent-specific overrides
	  agents = {
	    claude = {
	      keymaps = { ... },
	      buffer_options = { ... },
	      window_options = { ... },
	      on_attach = function(bufnr, info) ... end,
	    },
	  },
	})
<
Keymap arrays allow multiple keys for the same action:
>
	keymaps = {
	  submit = { "<CR>", "<C-Enter>", "<F5>" },
	  interrupt = { "<C-c>", "<Esc><Esc>" },
	}
<
=============================================================================
CUSTOMIZATION					*aibo-customization*

						*aibo-agent-specific*
Agent-specific configuration~

Configure agent-specific behavior through the setup function:
>
	require('aibo').setup({
	  agents = {
	    claude = {
	      keymaps = {
	        submit = { "<CR>", "<S-Enter>" },
	      },
	      on_attach = function(bufnr, info)
	        local claude = require('aibo').actions.claude(bufnr)
	        vim.keymap.set('n', '<leader>m', claude.mode, { buffer = bufnr })
	      end,
	    },
	  },
	})
<
						*aibo-custom-agents*
Adding custom agents~

Define new agents with their own configuration:
>
	require('aibo').setup({
	  agents = {
	    myai = {
	      keymaps = { submit = "<Tab>" },
	      buffer_options = { textwidth = 100 },
	      on_attach = function(bufnr, info)
	        vim.keymap.set('n', '<C-g>', function()
	          require('aibo').send('\007', bufnr)
	        end, { buffer = bufnr })
	      end,
	    },
	  },
	})
<
						*aibo-action-functions*
Using action functions~

Action functions are exposed for custom keymaps and scripting:
>
	-- In your configuration or on_attach callback
	local actions = require('aibo').actions.prompt(bufnr)
	vim.keymap.set('n', '<C-j>', actions.submit, { buffer = bufnr })
	vim.keymap.set('n', '<C-k>', actions.submit_close, { buffer = bufnr })
<

=============================================================================
INTERFACE					*aibo-interface*

-----------------------------------------------------------------------------
COMMANDS					*aibo-commands*

						*:Aibo*
:Aibo {cmd} [{args}...]
	Start an AI session with the specified command and optional arguments.
	Opens a terminal console running the command and creates a prompt
	buffer for user input.

	The command accepts additional arguments to pass to the AI agent:
>
		:Aibo claude
		:Aibo claude --profile development
		:Aibo codex
<
-----------------------------------------------------------------------------
FUNCTIONS					*aibo-functions*

						*aibo.setup()*
require('aibo').setup({opts})
	Configure the aibo plugin. Must be called before using the plugin.

	{opts}		Table of configuration options (see |aibo-configuration|)

	Example:
>
		require('aibo').setup({
		  submit_delay = 100,
		  prompt_height = 10,
		  prompt = {
		    keymaps = {
		      submit = { "<CR>", "<C-Enter>" },
		    },
		  },
		})
<
						*aibo.send()*
require('aibo').send({data} [, {bufnr}])
	Send raw data to the AI agent's terminal. This sends data directly
	without any processing.

	{data}		String data to send
	{bufnr}		Buffer number (default: current buffer)

	Example:
>
		require('aibo').send("Hello AI\n")
<
						*aibo.submit()*
require('aibo').submit({data} [, {bufnr}])
	Submit data to the AI agent with the configured submit key. This is
	equivalent to sending the data followed by the submit key after a
	small delay.

	{data}		String data to submit
	{bufnr}		Buffer number (default: current buffer)

	Example:
>
		require('aibo').submit("What is Neovim?")
<
						*aibo.get_config()*
require('aibo').get_config()
	Get the current configuration table.

	Returns:
		Table containing current configuration

	Example:
>
		local config = require('aibo').get_config()
		print(config.submit_delay)
<
						*aibo.get_buffer_config()*
require('aibo').get_buffer_config({buftype} [, {agent}])
	Get merged configuration for a specific buffer type and agent.

	{buftype}	"prompt" or "console"
	{agent}		Agent name (e.g., "claude", "codex")

	Returns:
		Merged configuration table

	Example:
>
		local cfg = require('aibo').get_buffer_config("prompt", "claude")
<
						*aibo.actions*
require('aibo').actions
	Module containing all action functions.

	Access prompt actions:
>
		local actions = require('aibo').actions.prompt(bufnr)
		actions.submit()      -- Submit content
		actions.interrupt()   -- Send Ctrl-C
<
	Access agent-specific actions:
>
		local claude = require('aibo').actions.claude(bufnr)
		claude.mode()         -- Toggle mode
		claude.verbose()      -- Toggle verbose
<
-----------------------------------------------------------------------------
KEY MAPPINGS					*aibo-key-mappings*

Default key mappings (configurable via setup()):

Console buffer mappings:

<CR>			Submit an empty line
<Esc>			Send escape key to the terminal
<C-c>			Send interrupt signal to the terminal
<C-l>			Clear the terminal screen
<C-n>			Navigate to next in history
<C-p>			Navigate to previous in history
<Down>			Send down arrow key
<Up>			Send up arrow key

Prompt buffer mappings:

<CR>			Submit the prompt buffer contents (normal mode)
<C-Enter>, <F5>		Submit and close prompt buffer
<Esc>			Send escape key to terminal
<C-c>			Send interrupt signal
<C-l>			Clear terminal
<C-n>			Navigate next
<C-p>			Navigate previous
<Down>			Send down arrow
<Up>			Send up arrow

Claude-specific mappings:

<S-Tab>, <F2>		Switch mode
<C-o>			Toggle verbose
<C-t>			Show todo
<C-_>, <C-->		Undo
<C-z>			Suspend
<C-v>			Paste

Codex-specific mappings:

<C-t>			Show transcript
<Home>			Go to home
<End>			Go to end
<PageUp>		Page up
<PageDown>		Page down
q			Quit

Note: Some key combinations may not work in all terminal emulators.

-----------------------------------------------------------------------------
ACTIONS						*aibo-actions*

Action functions provide programmatic access to all plugin functionality.

Prompt buffer actions:
>
	local actions = require('aibo').actions.prompt(bufnr)
	actions.submit()       -- Submit content
	actions.submit_close() -- Submit and close
	actions.interrupt()    -- Send Ctrl-C
	actions.clear()        -- Clear terminal
	actions.next()         -- Navigate next
	actions.prev()         -- Navigate previous
	actions.down()         -- Send down arrow
	actions.up()           -- Send up arrow
<
Console buffer actions:
>
	local actions = require('aibo').actions.console(bufnr)
	-- Same actions as prompt buffer
<
Claude-specific actions:
>
	local claude = require('aibo').actions.claude(bufnr)
	claude.mode()          -- Toggle mode
	claude.verbose()       -- Toggle verbose
	claude.todo()          -- Show todo
	claude.undo()          -- Undo
	claude.suspend()       -- Suspend
	claude.paste()         -- Paste
<
Codex-specific actions:
>
	local codex = require('aibo').actions.codex(bufnr)
	codex.transcript()     -- Show transcript
	codex.home()           -- Go to home
	codex.end_key()        -- Go to end
	codex.page_up()        -- Page up
	codex.page_down()      -- Page down
	codex.quit()           -- Quit
<
=============================================================================
FAQ						*aibo-faq*

Q: How do I integrate with Claude CLI?
A: Install the Claude CLI tool and use:
>
	:Aibo claude
<
Q: How do I integrate with Codex?
A: If you have a Codex CLI tool installed, use:
>
	:Aibo codex
<
Q: Can I use multiple AI agents simultaneously?
A: Yes, you can open multiple |:Aibo| sessions with different commands.
   Each will have its own console and prompt buffer.

Q: How do I customize key mappings?
A: Configure keymaps in setup() or use action functions:
>
	require('aibo').setup({
	  prompt = {
	    keymaps = {
	      submit = { "<CR>", "<C-j>" },
	      submit_close = "<C-k>",
	    },
	  },
	})
<
Or use action functions in on_attach:
>
	on_attach = function(bufnr, info)
	  local actions = require('aibo').actions.prompt(bufnr)
	  vim.keymap.set('n', '<C-j>', actions.submit, { buffer = bufnr })
	end
<
Q: Why does my AI agent not respond to submissions?
A: Try adjusting the submit_delay or submit_key options in setup() to match
   your AI agent's expectations. Some agents may need a longer delay or
   different submit key.

Q: Can I change the prompt buffer position?
A: The plugin currently opens the prompt below the console. For different
   layouts, you can manually rearrange windows after opening.
=============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0: